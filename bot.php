<?php
require_once 'config.php';
require_once 'onchannel.php';
require_once 'request.php';

class TelegramBot {
    private $token;
    private $db;
    private $channelModerator;
    
    public function __construct($db, $token) {
        $this->db = $db;
        $this->token = $token;
        $this->channelModerator = new ChannelModerator($db, $token, CHANNEL_ID);
    }
    
    private function trash_history_save($message,$db){
	    $stmt = $db->prepare("INSERT INTO `trash` (`serialised_response`) VALUES (?)");
        $stmt->bindValue(1, $message, PDO::PARAM_STR);
	    $stmt->execute();
    }
    
    public function handleUpdate($update) {
        //—Å–æ—Ö—Ä–∞–Ω–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        $message = serialize($update);
        $this->trash_history_save($message, $this->db);
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            if ($this->isChannelUpdate($update)) {
                $this->channelModerator->handleUpdate($update);
                return;
            }
            
            // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
            if (isset($update['chat_join_request'])) {
                $requestHandler = new JoinRequestHandler($this->db, $this->token, CHANNEL_ID);
                $requestHandler->handle($update);
                return;
            }
            
            // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
            if (isset($update['callback_query'])) {
                $this->handleCallback($update['callback_query']);
            }
            elseif (isset($update['message'])) {
                $this->handleMessage($update['message']);
            } 
        } catch (Exception $e) {
            error_log("Bot error: " . $e->getMessage());
            $this->notifyAdmins("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–æ—Ç–∞: " . $e->getMessage());
        }
    }

    private function isChannelUpdate($update) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
        if (isset($update['channel_post'])) {
            return true;
        }
        
        if (isset($update['message']['chat']['id']) && 
            $update['message']['chat']['id'] == CHANNEL_ID) {
            return true;
        }
        
        return false;
    }
    /*
    private function isRequestRelatedMessage($update) {
        // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        if (isset($update['chat_join_request'])) {
            return true;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
        if (isset($update['message']['text'])) {
            $userId = $update['message']['from']['id'];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
            $stmt = $this->db->prepare('SELECT 1 FROM requests 
                                      WHERE user_id = ? AND status = "pending" 
                                      LIMIT 1');
            $stmt->execute([$userId]);
            return (bool)$stmt->fetch();
        }
        
        return false;
    }
    */
    private function handleMessage($message) {
        $text = $message['text'] ?$message['text']: '';
        $chatId = $message['chat']['id'];
        $userId = $message['from']['id'];
    
        // –í–∞—à –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –±–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
        if($chatId == $userId) {
            $isAdmin = in_array($userId, ADMINS);
        } else {
            $isAdmin = false;
        }
    
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–∞–º
        if ($this->isRequestRelatedMessage($message)) {
            require_once 'request.php';
            $requestHandler = new JoinRequestHandler($this->db, $this->token, CHANNEL_ID);
            $requestHandler->handle(['message' => $message]);
            return;
        }
    
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        switch (true) {
            case strpos($text, '/start') === 0:
                $this->sendWelcomeMessage($chatId);
                break;
                
            case strpos($text, '/help') === 0:
                $this->sendHelpMessage($chatId);
                break;
                
            case strpos($text, '/stats') === 0 && $isAdmin:
                $this->sendStats($chatId);
                break;
                
            // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤ –ø–µ—Ä–µ–¥ default
            case strpos($text, '/–∏–Ω—Ñ–æ') === 0 && $isAdmin:
                $this->sendInfo($chatId);
                break;
                
            default:
                if ($isAdmin) {
                    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º
                    if(isset($message['text'])){
                        $this->handleAdminBroadcast($message);
                    }
                    else{
                        $this->forwardAdminMedia($message);
                    }
                } else {
                    $this->handleDefaultMessage($chatId, $text);
                }
        }
    }
    
    private function isRequestRelatedMessage($message) {
        if (!isset($message['text'])) return false;
        
        $userId = $message['from']['id'];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
        $stmt = $this->db->prepare('SELECT 1 FROM requests 
                                  WHERE user_id = ? AND status = "pending" 
                                  LIMIT 1');
        $stmt->execute([$userId]);
        return (bool)$stmt->fetch();
    }
    
    private function handleCallback($callback) {
        $data = $callback['data'];
        $chatId = $callback['message']['chat']['id'];
        $messageId = $callback['message']['message_id'];
        
        if (str_starts_with($data, 'approve_') || str_starts_with($data, 'reject_')) {
            $requestHandler = new JoinRequestHandler($this->db, $this->token, CHANNEL_ID);
            $requestHandler->handle(['callback_query' => $callback]);
            return;
        }


        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–¥–µ–π—Å—Ç–≤–∏–π –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        if (strpos($data, 'main_') === 0) {
            $action = substr($data, 5);
            
            switch ($action) {
                case 'menu':
                    $this->showMainMenu($chatId);
                    break;
                    
                // –î—Ä—É–≥–∏–µ callback-–¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞
            }
        }
        
        $this->answerCallback($callback['id']);
    }
    
    private function sendWelcomeMessage($chatId) {
        $message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!\n\n";
        $message .= "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –Ω–∞—à –∫–∞–Ω–∞–ª.";
        
        $this->sendMessage($chatId, $message, [
            'keyboard' => [
                ['üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'],
                ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
            ],
            'resize_keyboard' => true
        ]);
    }
    
    private function sendHelpMessage($chatId) {
        $message = "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
        $message .= "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n";
        $message .= "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n";
        $message .= "\n–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'";
        
        $this->sendMessage($chatId, $message);
    }
    
    private function sendStats($chatId) {
        try {
            $stmt = $this->db->query("SELECT 
                COUNT(*) as total_requests,
                SUM(status = 'approved') as approved,
                SUM(status = 'rejected') as rejected,
                SUM(status = 'pending') as pending
                FROM requests");
            $stats = $stmt->fetch();
            
            $message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:\n\n";
            $message .= "–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {$stats['total_requests']}\n";
            $message .= "–û–¥–æ–±—Ä–µ–Ω–æ: {$stats['approved']}\n";
            $message .= "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {$stats['rejected']}\n";
            $message .= "–í –æ–∂–∏–¥–∞–Ω–∏–∏: {$stats['pending']}";
            
            $this->sendMessage($chatId, $message);
        } catch (PDOException $e) {
            $this->sendMessage($chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            error_log("Stats error: " . $e->getMessage());
        }
    }
    
    private function handleDefaultMessage($chatId, $text) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if ($text === 'üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É') {
            $this->sendMessage($chatId, "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É @" . str_replace('@', '', CHANNEL_ID) . " –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ");
        } elseif ($text === '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
            $this->sendHelpMessage($chatId);
        } else {
            if($chatId != CHANNEL_ID){
                $this->sendMessage($chatId, "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
        }
    }
    
    private function handleAdminBroadcast($message) {
        $senderId = $message['from']['id'];
        $senderName = $this->getUserName($message['from']);
    
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        $adminMessage = "üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ $senderName:\n\n";
        $adminMessage .= $message['text'];
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        foreach (ADMINS as $adminId) {
            if ($adminId != $senderId) {
                $this->sendMessage($adminId, $adminMessage);
            }
        }
    
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        $this->sendMessage($senderId, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
    }

    private function notifyAdmins($message){
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        $adminMessage = $message;
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        foreach (ADMINS as $adminId) {
            if ($adminId != $senderId) {
                $this->sendMessage($adminId, $adminMessage);
            }
        }
    }
	
    private function getUserName($user) {
        $name = $user['first_name'] ?$user['first_name']: '';
        if (isset($user['last_name'])) {
            $name .= ' ' . $user['last_name'];
        }
        if (isset($user['username'])) {
            $name .= ' (@' . $user['username'] . ')';
        }
        return trim($name);
    }

    private function forwardAdminMedia($message) {
        $senderId = $message['from']['id'];
        $senderName = $this->getUserName($message['from']);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        foreach (ADMINS as $adminId) {
            if ($adminId != $senderId) {
                $this->forwardMessage($adminId, $message['chat']['id'], $message['message_id']);
            }
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        $this->sendMessage($senderId, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
    }

    private function forwardMessage($chatId, $fromChatId, $messageId) {
        $this->request('forwardMessage', [
            'chat_id' => $chatId,
            'from_chat_id' => $fromChatId,
            'message_id' => $messageId
        ]);
    }

    private function showMainMenu($chatId) {
        $this->sendMessage($chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", [
            'inline_keyboard' => [
                [['text' => 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'callback_data' => 'main_stats']],
                [['text' => 'üÜò –ü–æ–º–æ—â—å', 'callback_data' => 'main_help']]
            ]
        ]);
    }
    
    public function sendMessage($chatId, $text, $replyMarkup = null) {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($replyMarkup) {
            if (isset($replyMarkup['keyboard'])) {
                $data['reply_markup'] = json_encode([
                    'keyboard' => $replyMarkup['keyboard'],
                    'resize_keyboard' => $replyMarkup['resize_keyboard'] ?$replyMarkup['resize_keyboard']: true,
                    'one_time_keyboard' => $replyMarkup['one_time_keyboard'] ?$replyMarkup['one_time_keyboard']: false
                ]);
            } else {
                $data['reply_markup'] = json_encode($replyMarkup);
            }
        }
        
        $this->request('sendMessage', $data);
    }
    
    private function editMessage($chatId, $messageId, $text, $replyMarkup = null) {
        $data = [
            'chat_id' => $chatId,
            'message_id' => $messageId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($replyMarkup) {
            $data['reply_markup'] = json_encode($replyMarkup);
        }
        
        $this->request('editMessageText', $data);
    }
    
    private function answerCallback($callbackId, $text = '') {
        $this->request('answerCallbackQuery', [
            'callback_query_id' => $callbackId,
            'text' => $text
        ]);
    }
    
    private function request($method, $data = []) {
        $url = "https://api.telegram.org/bot{$this->token}/{$method}";
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $response = curl_exec($ch);
        curl_close($ch);
        return $response;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDB() {
    try {
        $dsn = "mysql:host=" . DB_HOST . ";dbname=" . DB_NAME . ";charset=utf8mb4";
        $pdo = new PDO($dsn, DB_USER, DB_PASS);
        $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        return $pdo;
    } catch (PDOException $e) {
        error_log("Database connection error: " . $e->getMessage());
        die("Database error");
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
$update = json_decode(file_get_contents('php://input'), true);
$db = initDB();
$db->exec("CREATE TABLE IF NOT EXISTS `trash` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `timenow` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `serialised_response` TEXT COLLATE utf8mb4_general_ci
)");
        $db->exec("CREATE TABLE IF NOT EXISTS requests (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT NOT NULL,
            username VARCHAR(255),
            first_name VARCHAR(255),
            last_name VARCHAR(255),
            chat_id BIGINT NOT NULL,
            status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
            request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            captcha_answer VARCHAR(10),
            captcha_solved TINYINT(1) DEFAULT 0,
            current_question INT DEFAULT 0,
            completed_questions TINYINT(1) DEFAULT 0,
            INDEX idx_user_id (user_id),
            INDEX idx_status (status)
        )");
        
        $db->exec("CREATE TABLE IF NOT EXISTS interactions (
            id INT AUTO_INCREMENT PRIMARY KEY,
            request_id INT NOT NULL,
            message_text TEXT,
            is_bot_message TINYINT(1),
            message_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE CASCADE,
            INDEX idx_request_id (request_id)
        )");
        
        $db->exec("CREATE TABLE IF NOT EXISTS answers (
            id INT AUTO_INCREMENT PRIMARY KEY,
            request_id INT NOT NULL,
            question_id INT NOT NULL,
            question_text TEXT NOT NULL,
            answer_text TEXT,
            answer_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE CASCADE,
            INDEX idx_request_id (request_id),
            INDEX idx_question (question_id)
        )");
        
        $db->exec("CREATE TABLE IF NOT EXISTS admin_messages (
            id INT AUTO_INCREMENT PRIMARY KEY,
            request_id INT NOT NULL,
            admin_id BIGINT NOT NULL,
            message_id INT NOT NULL,
            FOREIGN KEY (request_id) REFERENCES requests(id) ON DELETE CASCADE,
            UNIQUE KEY unique_admin_message (request_id, admin_id)
        )");
$bot = new TelegramBot($db, BOT_TOKEN);
$bot->handleUpdate($update);

http_response_code(200);
?>
